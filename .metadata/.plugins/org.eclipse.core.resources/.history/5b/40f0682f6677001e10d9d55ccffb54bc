package com.coupond.controller;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import com.coupond.dto.RegisterDto;
import com.coupond.dto.UserDto;
import com.coupond.service.UserService;

@ExtendWith(MockitoExtension.class)
//@WebMvcTest(UserController.class)
@SpringBootTest
@RunWith(MockitoJUnitRunner.class)
public class UserControllerTests {

    @InjectMocks
    private UserController userController;

    @Mock
    private UserService userService;

    @Test
    public void testRegisterUser_ValidUserRegistration() throws Exception {
        // Arrange
        RegisterDto registerDto = new RegisterDto("newuser", "password123", "newuser@example.com", "1234567890");
        UserDto userDto = new UserDto(1, "newuser", "newuser@example.com", "USER", "1234567890");

        when(userService.registerUser(registerDto)).thenReturn(userDto);

        // Act
        ResponseEntity<UserDto> response = userController.registerUser(registerDto);

        // Assert
        assertEquals(HttpStatus.CREATED, response.getStatusCode());
        assertEquals(userDto, response.getBody());
    }

    @Test
    public void testRegisterAdmin_ValidAdminRegistration() throws Exception {
        // Arrange
        RegisterDto registerDto = new RegisterDto("adminuser", "password123", "admin@example.com", "1234567890");
        UserDto adminDto = new UserDto(2, "adminuser", "admin@example.com", "ADMIN", "1234567890");

        when(userService.registerAdmin(registerDto)).thenReturn(adminDto);

        // Act
        ResponseEntity<UserDto> response = userController.registerAdmin(registerDto);

        // Assert
        assertEquals(HttpStatus.CREATED, response.getStatusCode());
        assertEquals(adminDto, response.getBody());
    }

    @Test
    public void testGetAllUsers_Valid() throws Exception {
        // Arrange
        List<UserDto> userList = new ArrayList<>();
        // Add userDto objects to the list

        when(userService.getAllUsers()).thenReturn(userList);

        // Act
        ResponseEntity<List<UserDto> > response = userController.getAllUsers();

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(userList, response.getBody());
    }

    // Similar tests for the remaining controller methods...

}
